"""Functions to make a module of generator classes."""
import inspect
from types import ModuleType
from typing import Final

from mimesis.providers.base import BaseProvider
from sqlalchemy.sql import sqltypes

from sqlsynthgen import providers

HEADER_TEXT: str = "\n".join(
    (
        '"""This file was auto-generated by sqlsynthgen but can be edited manually."""',
        "from mimesis import Generic",
        "from mimesis.locales import Locale",
        "",
        "generic = Generic(locale=Locale.EN)",
        "",
    )
)
for entry_name, entry in inspect.getmembers(providers, inspect.isclass):
    if issubclass(entry, BaseProvider) and entry.__module__ == "sqlsynthgen.providers":
        HEADER_TEXT += f"\nfrom sqlsynthgen.providers import {entry_name}"
        HEADER_TEXT += f"\ngeneric.add_provider({entry_name})"
HEADER_TEXT += "\n"

INDENTATION: Final[str] = " " * 4

SQL_TO_MIMESIS_MAP = {
    sqltypes.BigInteger: "generic.numeric.integer_number()",
    sqltypes.Boolean: "generic.development.boolean()",
    sqltypes.Date: "generic.datetime.date()",
    sqltypes.DateTime: "generic.datetime.datetime()",
    sqltypes.Float: "generic.numeric.float_number()",
    sqltypes.Integer: "generic.numeric.integer_number()",
    sqltypes.LargeBinary: "generic.bytes_provider.bytes()",
    sqltypes.Numeric: "generic.numeric.float_number()",
    sqltypes.String: "generic.text.color()",
    sqltypes.Text: "generic.text.color()",
}


def make_generators_from_tables(
    tables_module: ModuleType, provider_config: dict
) -> str:
    """Creates sqlsynthgen generator classes from a sqlacodegen-generated file.

    Args:
      tables_module: A sqlacodegen-generated module.

    Returns:
      A string that is a valid Python module, once written to file.
    """

    new_content = HEADER_TEXT

    for import_statement in provider_config.get("imports", []):
        new_content += f"\nimport {import_statement}"

    sorted_generators = "[\n"

    for table in tables_module.Base.metadata.sorted_tables:
        new_class_name = table.name + "Generator"
        table_config = provider_config.get("tables", {}).get(table.name, {})
        if table_config.get("vocabulary_table", False):
            raise NotImplementedError("Vocabulary tables currently unimplemented.")
        columns_config = table_config.get("columns", {})

        sorted_generators += INDENTATION + new_class_name + ",\n"
        new_content += (
            "\n\nclass "
            + new_class_name
            + ":\n"
            + INDENTATION
            + "def __init__(self, src_db_conn, dst_db_conn):\n"
        )

        for column in table.columns:
            new_content += INDENTATION * 2
            # For each column, choose which mimesis provider to use for generating
            # values.
            # If the user has specified a particular provider to use, use that.
            if column.name in columns_config:
                provider = columns_config[column.name]["provider"]
                new_content += f"self.{column.name} = {provider}"

            # If not, and it's a primary key column, we presume that primary keys are
            # populated automatically.
            elif column.primary_key:
                new_content += "pass"

            # If it's a foreign key column, pull random values from the column it
            # references.
            elif column.foreign_keys:
                if len(column.foreign_keys) > 1:
                    raise NotImplementedError(
                        "Can't handle multiple foreign keys for one column."
                    )
                fkey = column.foreign_keys.pop()
                fk_schema, fk_table, fk_column = fkey.target_fullname.split(".")
                new_content += (
                    f"self.{column.name} = "
                    f"generic.column_value_provider.column_value(dst_db_conn, "
                    f'"{fk_schema}", "{fk_table}", "{fk_column}"'
                    ")"
                )

            # Otherwise generate values based on just the datatype of the column.
            else:
                provider = SQL_TO_MIMESIS_MAP[type(column.type)]
                new_content += f"self.{column.name} = {provider}"
            new_content += "\n"

    sorted_generators += "]"

    new_content += "\n\n" + "sorted_generators = " + sorted_generators + "\n"

    return new_content
