
row_generators_module: airbnb_generators

tables:
  countries:
    vocabulary_table: true

  sessions:
    num_rows_per_pass: 0
    row_generators:
      - name: generic.numeric.integer_number
        kwargs:
          start: 0
          end: 3600
        columns_assigned: secs_elapsed
      - name: generic.choice
        kwargs:
          items: ["show", "index", "personalize"]
        columns_assigned: action

  age_gender_bkts:
    num_rows_per_pass: 1
    row_generators:
      - name: generic.person.password
        columns_assigned: gender
      - name: generic.person.password
        columns_assigned: age_bucket
      - name: generic.column_value_provider.column_value
        args: [dst_db_conn, orm.Countries, '"country_destination"']
        columns_assigned: country_destination

  users:
    num_rows_per_pass: 0
    row_generators:
      - name: generic.person.password
        kwargs: null
        columns_assigned: id
      - name: generic.person.identifier
        kwargs:
           mask: '"@@##@@@@"' # Using this provider, we generate alpha-numeric IDs.
        columns_assigned: id
      - name: airbnb_generators.user_dates_provider
        kwargs:
           generic: generic
        columns_assigned: ["date_account_created", "date_first_booking"]
      - name: airbnb_generators.user_age_provider
        kwargs:
           query_results: SRC_STATS["age_stats"]
        columns_assigned: age

src-stats:
  - name: age_stats
    query: >
      SELECT age, id
      FROM users
      WHERE age <= 100
    dp-query: >
      SELECT AVG(age), STDDEV(age)
      FROM query_result
    epsilon: 0.1
    delta: 0.000001
    snsql-metadata:
      max_ids: 1
      id:
        type: string
        private_id: true
      age:
        type: float
        lower: 0
        upper: 100

story_generators_module: airbnb_generators
story_generators:
  - name: airbnb_generators.sessions_story
    num_stories_per_pass: 30
