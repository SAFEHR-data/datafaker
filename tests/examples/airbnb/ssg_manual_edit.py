"""This file was auto-generated by sqlsynthgen but can be edited manually."""
from mimesis import Generic
from mimesis.locales import Locale
from sqlsynthgen.base import FileUploader
from sqlsynthgen.unique_generator import UniqueGenerator

generic = Generic(locale=Locale.EN_GB)

from sqlsynthgen.providers import BytesProvider

generic.add_provider(BytesProvider)
from sqlsynthgen.providers import ColumnValueProvider

generic.add_provider(ColumnValueProvider)
from sqlsynthgen.providers import TimedeltaProvider

generic.add_provider(TimedeltaProvider)
from sqlsynthgen.providers import TimespanProvider

generic.add_provider(TimespanProvider)
from sqlsynthgen.providers import WeightedBooleanProvider

generic.add_provider(WeightedBooleanProvider)

import orm


class countriesGenerator:
    num_rows_per_pass = 1

    def __init__(self):
        pass

    def __call__(self, dst_db_conn):
        result = {}
        result["country_destination"] = generic.person.password() #manual edit
        result["lat_destination"] = generic.numeric.float_number()
        result["lng_destination"] = generic.numeric.float_number()
        result["distance_km"] = generic.numeric.float_number()
        result["destination_km2"] = generic.numeric.integer_number()
        result["destination_language"] = generic.text.color()
        result["language_levenshtein_distance"] = generic.numeric.float_number()
        return result


class age_gender_bktsGenerator:
    num_rows_per_pass = 1

    def __init__(self):
        pass

    def __call__(self, dst_db_conn):
        result = {}
        result["gender"] = generic.person.password() #manual edit
        result["age_bucket"] = generic.person.password() #manual edit
        result["population_in_thousands"] = generic.numeric.integer_number()
        result["year"] = generic.numeric.integer_number()
        result["country_destination"] = generic.column_value_provider.column_value(
            dst_db_conn, orm.Countries, "country_destination")  #manual edit
        return result


class usersGenerator:
    num_rows_per_pass = 1

    def __init__(self):
        pass

    def __call__(self, dst_db_conn):
        result = {}
        result["id"] = generic.person.password() #manual edit
        result["date_account_created"] = generic.datetime.date()
        result["timestamp_first_active"] = generic.datetime.datetime()
        result["date_first_booking"] = generic.datetime.date()
        result["gender"] = generic.text.color()
        result["age"] = generic.numeric.integer_number()
        result["signup_method"] = generic.text.color()
        result["signup_flow"] = generic.numeric.integer_number()
        result["language"] = generic.text.color()
        result["affiliate_channel"] = generic.text.color()
        result["affiliate_provider"] = generic.text.color()
        result["first_affiliate_tracked"] = generic.text.color()
        result["signup_app"] = generic.text.color()
        result["first_device_type"] = generic.text.color()
        result["first_browser"] = generic.text.color()
        result["country_destination"] = generic.column_value_provider.column_value(
            dst_db_conn, orm.Countries, "country_destination"
        )
        return result


class sessionsGenerator:
    num_rows_per_pass = 1

    def __init__(self):
        pass

    def __call__(self, dst_db_conn):
        result = {}
        result["user_id"] = generic.column_value_provider.column_value(
            dst_db_conn, orm.Users, "id"
        )
        result["action"] = generic.text.color()
        result["action_type"] = generic.text.color()
        result["action_detail"] = generic.text.color()
        result["device_type"] = generic.text.color()
        result["secs_elapsed"] = generic.numeric.float_number()
        return result


table_generator_dict = {
    "countries": countriesGenerator(),
    "age_gender_bkts": age_gender_bktsGenerator(),
    "users": usersGenerator(),
    "sessions": sessionsGenerator(),
}


vocab_dict = {}


story_generator_list = []
